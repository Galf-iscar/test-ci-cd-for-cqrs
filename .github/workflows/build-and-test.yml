name: Build, Test, and SonarQube Integration

on:
  push:
    branches: [ "main", "develop", "master" ]
  pull_request:
    branches: [ "main" , "master" ]

jobs:
  test-and-sonarqube:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Install custom TLS cert
      run: |
        echo "${{ secrets.TLS_CRT_CONTENT }}" | base64 --decode | sudo tee /usr/local/share/ca-certificates/nexus.crt > /dev/null
        sudo chmod 644 /usr/local/share/ca-certificates/nexus.crt
        sudo update-ca-certificates
        echo "Custom Nexus TLS certificate installed successfully"

    - name: Add Nexus NuGet source
      run: |
            dotnet nuget add source "https://akssvc-horizon-purchase.ssl.imc-companies.com/nexus/repository/horizon.backend.nuget/" --name NexusRepo --username ${{ secrets.NEXUS_USERNAME }} --password ${{ secrets.NEXUS_PASSWORD }} --store-password-in-clear-text --valid-authentication-types basic


    - name: Restore dependencies
      run: dotnet restore ./CQRS_App.sln

    - name: Build solution
      run: dotnet build ./CQRS_App.sln --no-restore --configuration Release

    - name: Run tests with coverage
      id: run-tests
      run: |
        dotnet test ./Tests/CQRS_App.Tests.csproj \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory:"TestResults" \
          --logger:"trx;LogFileName=test-results.trx"

    - name: Install ReportGenerator
      run: dotnet tool install -g dotnet-reportgenerator-globaltool

    - name: Generate coverage report
      id: generate-coverage
      run: |
        reportgenerator \
          -reports:"TestResults/*/coverage.cobertura.xml" \
          -targetdir:"CoverageReport" \
          -reporttypes:"Html;HtmlSummary;Badges;JsonSummary;MarkdownSummary"

    - name: Upload coverage reports as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          CoverageReport/
          TestResults/

    - name: SonarQube Analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        dotnet tool install --global dotnet-sonarscanner
        dotnet sonarscanner begin \
          /k:"cqrs_app" \
          /d:sonar.host.url="${{ secrets.HORIZON_BASE_URL }}/sonarqube/" \
          /d:sonar.login="$SONAR_TOKEN" \
          /d:sonar.coverageReportPaths="CoverageReport/Summary.json" \
          /d:sonar.cs.vstest.reportsPaths="TestResults/test-results.trx"
        dotnet build ./CQRS_App.sln --configfile ./nuget.config
        dotnet sonarscanner end /d:sonar.login="$SONAR_TOKEN"

    - name: Check SonarQube Quality Gate
      uses: sonarsource/sonarqube-quality-gate-action@v1.0.0
      with:
        host-url: ${{ secrets.HORIZON_BASE_URL }}/sonarqube/
        sonar-token: ${{ secrets.SONAR_TOKEN }}